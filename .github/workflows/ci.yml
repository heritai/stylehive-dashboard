name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov streamlit
    
    - name: Run data generation test
      run: |
        python -c "
        import sys
        sys.path.append('utils')
        from data_generator import StyleHiveDataGenerator
        generator = StyleHiveDataGenerator()
        df = generator.generate_dataset(months=1)  # Test with 1 month of data
        print(f'‚úÖ Data generation test passed: {len(df)} transactions generated')
        "
    
    - name: Run data preprocessing test
      run: |
        python -c "
        import sys
        sys.path.append('utils')
        from data_prep import DataPreprocessor
        preprocessor = DataPreprocessor()
        df = preprocessor.load_data()
        print(f'‚úÖ Data preprocessing test passed: {df.shape[0]} rows loaded')
        "
    
    - name: Run recommendation models test
      run: |
        python -c "
        import sys
        sys.path.append('utils')
        from data_prep import DataPreprocessor
        from recommenders import MarketBasketAnalyzer, CollaborativeFilteringRecommender
        from insights import BusinessInsights
        
        # Load data
        preprocessor = DataPreprocessor()
        preprocessor.load_data()
        baskets = preprocessor.get_basket_data()
        user_item_matrix = preprocessor.get_transaction_matrix()
        
        # Test models
        mba = MarketBasketAnalyzer(min_support=0.05, min_confidence=0.3)
        mba.fit(baskets)
        print('‚úÖ Market Basket Analysis model created')
        
        cf = CollaborativeFilteringRecommender(n_components=3)
        cf.fit(user_item_matrix)
        print('‚úÖ Collaborative Filtering model created')
        
        insights = BusinessInsights(preprocessor)
        kpis = insights.get_kpis()
        print(f'‚úÖ Business insights generated: {len(kpis)} KPIs')
        "
    
    - name: Test Streamlit app import
      run: |
        python -c "
        import sys
        sys.path.append('.')
        try:
            import app
            print('‚úÖ Streamlit app imports successfully')
        except Exception as e:
            print(f'‚ùå Streamlit app import failed: {e}')
            sys.exit(1)
        "
    
    - name: Test app components
      run: |
        python -c "
        import sys
        sys.path.append('.')
        from app import load_data, load_models, create_top_products_chart
        from insights import BusinessInsights
        
        # Test data loading
        preprocessor = load_data()
        print('‚úÖ Data loading function works')
        
        # Test model loading
        mba, cf, hybrid = load_models()
        print('‚úÖ Model loading functions work')
        
        # Test insights
        insights = BusinessInsights(preprocessor)
        top_products = insights.get_top_products()
        print('‚úÖ Insights generation works')
        
        # Test chart creation
        fig = create_top_products_chart(top_products)
        print('‚úÖ Chart creation works')
        "
    
    - name: Check for common issues
      run: |
        echo "üîç Checking for common issues..."
        
        # Check for missing imports
        python -c "
        import sys
        sys.path.append('.')
        try:
            import streamlit as st
            import pandas as pd
            import numpy as np
            import plotly.express as px
            import plotly.graph_objects as go
            from sklearn.decomposition import TruncatedSVD
            from mlxtend.frequent_patterns import apriori, association_rules
            from mlxtend.preprocessing import TransactionEncoder
            import networkx as nx
            print('‚úÖ All required imports available')
        except ImportError as e:
            print(f'‚ùå Missing import: {e}')
            sys.exit(1)
        "
        
        # Check file structure
        echo "üìÅ Checking file structure..."
        ls -la
        ls -la utils/
        ls -la sample_data/
        
        # Check data file exists
        if [ -f "sample_data/stylehive_transactions.csv" ]; then
            echo "‚úÖ Data file exists"
            wc -l sample_data/stylehive_transactions.csv
        else
            echo "‚ùå Data file missing"
            exit 1
        fi

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to Streamlit Cloud
      run: |
        echo "üöÄ Deployment would happen here"
        echo "‚úÖ All tests passed - ready for Streamlit Cloud deployment"
        echo "üìä App should be available at your Streamlit Cloud URL"
